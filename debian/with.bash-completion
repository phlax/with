
data=`kv with dump`
OWD=`pwd`


completion_function() {
    echo $(complete -p $1 | cut -d"F" -f2 | cut -d" " -f2)
}


delegate_completion () {
    prev="${COMP_WORDS[2]}"
    COMP_WORDS=(${COMP_WORDS[@]:2})
    COMP_CWORD=$((COMP_CWORD-=2))
    eval "$(completion_function $prev)"
}


filepath () {
    local key
    key=${COMP_WORDS[1]}
    if [ "$key" != "" ]; then
	echo $(echo $data | jq -r ".$key")
    fi
}


_with_complete()
{
    local cur prev values cwd
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    cwd=$(filepath)

    if [ "$cwd" != "" ] && [ "$cwd" != "null" ] ; then
	cd "$OWD/$cwd" >> /dev/null
    fi

    if [[ ${cur} == "" ]] ; then
	if [ $COMP_CWORD == 1 ]; then
	    values=$(echo $data | jq "keys[]")
	    values="@dump @get @list @set @unset $values"
	    COMPREPLY=( $(compgen -W "${values[@]##*/}") )
	elif [ $COMP_CWORD == 2 ]; then
	    COMPREPLY=($(compgen -abckA function))
	else
	    delegate_completion
	fi
    else
	if [ $COMP_CWORD == 1 ]; then
	    values=$(echo $data | jq "keys[] | select(. | startswith(\"$cur\"))")
	    COMPREPLY=( $(compgen -W $values -- ${cur}) )
	elif [ $COMP_CWORD == 2 ]; then
	    COMPREPLY=($(compgen -abckA function | grep "^$cur"))
	else
	    delegate_completion
	fi
    fi
    if [ "$cwd" != "" ] && [ "$cwd" != "null" ] ; then
	cd - >> /dev/null
    fi
    return 0
}

complete -F _with_complete with
